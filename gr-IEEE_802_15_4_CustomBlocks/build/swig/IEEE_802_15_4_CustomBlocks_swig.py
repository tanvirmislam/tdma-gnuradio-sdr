# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IEEE_802_15_4_CustomBlocks_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IEEE_802_15_4_CustomBlocks_swig')
    _IEEE_802_15_4_CustomBlocks_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IEEE_802_15_4_CustomBlocks_swig', [dirname(__file__)])
        except ImportError:
            import _IEEE_802_15_4_CustomBlocks_swig
            return _IEEE_802_15_4_CustomBlocks_swig
        try:
            _mod = imp.load_module('_IEEE_802_15_4_CustomBlocks_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IEEE_802_15_4_CustomBlocks_swig = swig_import_helper()
    del swig_import_helper
else:
    import _IEEE_802_15_4_CustomBlocks_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _IEEE_802_15_4_CustomBlocks_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _IEEE_802_15_4_CustomBlocks_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _IEEE_802_15_4_CustomBlocks_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _IEEE_802_15_4_CustomBlocks_swig.high_res_timer_epoch()
class MAC_Tx(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Tx.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Tx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Tx::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst_addr=0xffff, src_pan=0x1aaa, src_addr=0x3344):
        """
        make(int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst_addr=0xffff, int src_pan=0x1aaa, int src_addr=0x3344) -> MAC_Tx_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Tx.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Tx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Tx::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Tx
    __del__ = lambda self: None
MAC_Tx_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_swigregister
MAC_Tx_swigregister(MAC_Tx)

def MAC_Tx_make(fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst_addr=0xffff, src_pan=0x1aaa, src_addr=0x3344):
    """
    MAC_Tx_make(int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst_addr=0xffff, int src_pan=0x1aaa, int src_addr=0x3344) -> MAC_Tx_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Tx.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Tx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Tx::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr)

class MAC_Tx_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Tx)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Tx)> self) -> MAC_Tx_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Tx)> self, MAC_Tx p) -> MAC_Tx_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_MAC_Tx_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MAC_Tx_sptr self) -> MAC_Tx"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Tx_sptr
    __del__ = lambda self: None

    def make(self, fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst_addr=0xffff, src_pan=0x1aaa, src_addr=0x3344):
        """
        make(MAC_Tx_sptr self, int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst_addr=0xffff, int src_pan=0x1aaa, int src_addr=0x3344) -> MAC_Tx_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Tx.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Tx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Tx::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_make(self, fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr)


    def history(self):
        """history(MAC_Tx_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MAC_Tx_sptr self, int which, int delay)
        declare_sample_delay(MAC_Tx_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MAC_Tx_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MAC_Tx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MAC_Tx_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_relative_rate(self)


    def start(self):
        """start(MAC_Tx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_start(self)


    def stop(self):
        """stop(MAC_Tx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MAC_Tx_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MAC_Tx_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MAC_Tx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MAC_Tx_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MAC_Tx_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MAC_Tx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MAC_Tx_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MAC_Tx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MAC_Tx_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MAC_Tx_sptr self, long max_output_buffer)
        set_max_output_buffer(MAC_Tx_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MAC_Tx_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MAC_Tx_sptr self, long min_output_buffer)
        set_min_output_buffer(MAC_Tx_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MAC_Tx_sptr self, int which) -> float
        pc_input_buffers_full(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MAC_Tx_sptr self, int which) -> float
        pc_input_buffers_full_avg(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MAC_Tx_sptr self, int which) -> float
        pc_input_buffers_full_var(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MAC_Tx_sptr self, int which) -> float
        pc_output_buffers_full(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MAC_Tx_sptr self, int which) -> float
        pc_output_buffers_full_avg(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MAC_Tx_sptr self, int which) -> float
        pc_output_buffers_full_var(MAC_Tx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MAC_Tx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MAC_Tx_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MAC_Tx_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MAC_Tx_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MAC_Tx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MAC_Tx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MAC_Tx_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MAC_Tx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MAC_Tx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MAC_Tx_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MAC_Tx_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MAC_Tx_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MAC_Tx_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MAC_Tx_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MAC_Tx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MAC_Tx_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MAC_Tx_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MAC_Tx_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MAC_Tx_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MAC_Tx_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_message_subscribers(self, which_port)

MAC_Tx_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Tx_sptr_swigregister
MAC_Tx_sptr_swigregister(MAC_Tx_sptr)


MAC_Tx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MAC_Tx = MAC_Tx.make;

class receiver_packet_sink(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::receiver_packet_sink.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::receiver_packet_sink's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::receiver_packet_sink::make is the public interface for creating new instances.

    Args:
        threshold : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(threshold=10):
        """
        make(int threshold=10) -> receiver_packet_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::receiver_packet_sink.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::receiver_packet_sink's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::receiver_packet_sink::make is the public interface for creating new instances.

        Args:
            threshold : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_make(threshold)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_receiver_packet_sink
    __del__ = lambda self: None
receiver_packet_sink_swigregister = _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_swigregister
receiver_packet_sink_swigregister(receiver_packet_sink)

def receiver_packet_sink_make(threshold=10):
    """
    receiver_packet_sink_make(int threshold=10) -> receiver_packet_sink_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::receiver_packet_sink.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::receiver_packet_sink's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::receiver_packet_sink::make is the public interface for creating new instances.

    Args:
        threshold : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_make(threshold)

class receiver_packet_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::receiver_packet_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::receiver_packet_sink)> self) -> receiver_packet_sink_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::receiver_packet_sink)> self, receiver_packet_sink p) -> receiver_packet_sink_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_receiver_packet_sink_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(receiver_packet_sink_sptr self) -> receiver_packet_sink"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_receiver_packet_sink_sptr
    __del__ = lambda self: None

    def make(self, threshold=10):
        """
        make(receiver_packet_sink_sptr self, int threshold=10) -> receiver_packet_sink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::receiver_packet_sink.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::receiver_packet_sink's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::receiver_packet_sink::make is the public interface for creating new instances.

        Args:
            threshold : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_make(self, threshold)


    def history(self):
        """history(receiver_packet_sink_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(receiver_packet_sink_sptr self, int which, int delay)
        declare_sample_delay(receiver_packet_sink_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(receiver_packet_sink_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(receiver_packet_sink_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(receiver_packet_sink_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_relative_rate(self)


    def start(self):
        """start(receiver_packet_sink_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_start(self)


    def stop(self):
        """stop(receiver_packet_sink_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(receiver_packet_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(receiver_packet_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(receiver_packet_sink_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(receiver_packet_sink_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(receiver_packet_sink_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(receiver_packet_sink_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(receiver_packet_sink_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(receiver_packet_sink_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(receiver_packet_sink_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(receiver_packet_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(receiver_packet_sink_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(receiver_packet_sink_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(receiver_packet_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(receiver_packet_sink_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(receiver_packet_sink_sptr self, int which) -> float
        pc_input_buffers_full(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(receiver_packet_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(receiver_packet_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(receiver_packet_sink_sptr self, int which) -> float
        pc_output_buffers_full(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(receiver_packet_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(receiver_packet_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(receiver_packet_sink_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(receiver_packet_sink_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(receiver_packet_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(receiver_packet_sink_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(receiver_packet_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(receiver_packet_sink_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(receiver_packet_sink_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(receiver_packet_sink_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(receiver_packet_sink_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(receiver_packet_sink_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(receiver_packet_sink_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(receiver_packet_sink_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(receiver_packet_sink_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(receiver_packet_sink_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(receiver_packet_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(receiver_packet_sink_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(receiver_packet_sink_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(receiver_packet_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(receiver_packet_sink_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(receiver_packet_sink_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(receiver_packet_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_message_subscribers(self, which_port)

receiver_packet_sink_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.receiver_packet_sink_sptr_swigregister
receiver_packet_sink_sptr_swigregister(receiver_packet_sink_sptr)


receiver_packet_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
receiver_packet_sink = receiver_packet_sink.make;

class MAC_Rx(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Rx.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Rx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Rx::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst : 
        src_pan : 
        src : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst=0xffff, src_pan=0xaaff, src=0x3344):
        """
        make(int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst=0xffff, int src_pan=0xaaff, int src=0x3344) -> MAC_Rx_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Rx.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Rx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Rx::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst : 
            src_pan : 
            src : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_make(fcf, seq_nr, dst_pan, dst, src_pan, src)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Rx
    __del__ = lambda self: None
MAC_Rx_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_swigregister
MAC_Rx_swigregister(MAC_Rx)

def MAC_Rx_make(fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst=0xffff, src_pan=0xaaff, src=0x3344):
    """
    MAC_Rx_make(int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst=0xffff, int src_pan=0xaaff, int src=0x3344) -> MAC_Rx_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Rx.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Rx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Rx::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst : 
        src_pan : 
        src : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_make(fcf, seq_nr, dst_pan, dst, src_pan, src)

class MAC_Rx_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Rx)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Rx)> self) -> MAC_Rx_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Rx)> self, MAC_Rx p) -> MAC_Rx_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_MAC_Rx_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MAC_Rx_sptr self) -> MAC_Rx"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Rx_sptr
    __del__ = lambda self: None

    def make(self, fcf=0x8841, seq_nr=0, dst_pan=0x1aaa, dst=0xffff, src_pan=0xaaff, src=0x3344):
        """
        make(MAC_Rx_sptr self, int fcf=0x8841, int seq_nr=0, int dst_pan=0x1aaa, int dst=0xffff, int src_pan=0xaaff, int src=0x3344) -> MAC_Rx_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Rx.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Rx's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Rx::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst : 
            src_pan : 
            src : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_make(self, fcf, seq_nr, dst_pan, dst, src_pan, src)


    def history(self):
        """history(MAC_Rx_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MAC_Rx_sptr self, int which, int delay)
        declare_sample_delay(MAC_Rx_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MAC_Rx_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MAC_Rx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MAC_Rx_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_relative_rate(self)


    def start(self):
        """start(MAC_Rx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_start(self)


    def stop(self):
        """stop(MAC_Rx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MAC_Rx_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MAC_Rx_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MAC_Rx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MAC_Rx_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MAC_Rx_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MAC_Rx_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MAC_Rx_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MAC_Rx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MAC_Rx_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MAC_Rx_sptr self, long max_output_buffer)
        set_max_output_buffer(MAC_Rx_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MAC_Rx_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MAC_Rx_sptr self, long min_output_buffer)
        set_min_output_buffer(MAC_Rx_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MAC_Rx_sptr self, int which) -> float
        pc_input_buffers_full(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MAC_Rx_sptr self, int which) -> float
        pc_input_buffers_full_avg(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MAC_Rx_sptr self, int which) -> float
        pc_input_buffers_full_var(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MAC_Rx_sptr self, int which) -> float
        pc_output_buffers_full(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MAC_Rx_sptr self, int which) -> float
        pc_output_buffers_full_avg(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MAC_Rx_sptr self, int which) -> float
        pc_output_buffers_full_var(MAC_Rx_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MAC_Rx_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MAC_Rx_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MAC_Rx_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MAC_Rx_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MAC_Rx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MAC_Rx_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MAC_Rx_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MAC_Rx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MAC_Rx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MAC_Rx_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MAC_Rx_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MAC_Rx_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MAC_Rx_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MAC_Rx_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MAC_Rx_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MAC_Rx_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MAC_Rx_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MAC_Rx_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MAC_Rx_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MAC_Rx_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_message_subscribers(self, which_port)

MAC_Rx_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Rx_sptr_swigregister
MAC_Rx_sptr_swigregister(MAC_Rx_sptr)


MAC_Rx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MAC_Rx = MAC_Rx.make;

class Beacon(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::Beacon.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::Beacon's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::Beacon::make is the public interface for creating new instances.

    Args:
        interval : 
        total_msg : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(interval=1000, total_msg=-1):
        """
        make(long interval=1000, long total_msg=-1) -> Beacon_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::Beacon.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::Beacon's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::Beacon::make is the public interface for creating new instances.

        Args:
            interval : 
            total_msg : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_make(interval, total_msg)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_Beacon
    __del__ = lambda self: None
Beacon_swigregister = _IEEE_802_15_4_CustomBlocks_swig.Beacon_swigregister
Beacon_swigregister(Beacon)

def Beacon_make(interval=1000, total_msg=-1):
    """
    Beacon_make(long interval=1000, long total_msg=-1) -> Beacon_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::Beacon.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::Beacon's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::Beacon::make is the public interface for creating new instances.

    Args:
        interval : 
        total_msg : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.Beacon_make(interval, total_msg)

class Beacon_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::Beacon)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::Beacon)> self) -> Beacon_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::Beacon)> self, Beacon p) -> Beacon_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_Beacon_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Beacon_sptr self) -> Beacon"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_Beacon_sptr
    __del__ = lambda self: None

    def make(self, interval=1000, total_msg=-1):
        """
        make(Beacon_sptr self, long interval=1000, long total_msg=-1) -> Beacon_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::Beacon.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::Beacon's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::Beacon::make is the public interface for creating new instances.

        Args:
            interval : 
            total_msg : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_make(self, interval, total_msg)


    def history(self):
        """history(Beacon_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Beacon_sptr self, int which, int delay)
        declare_sample_delay(Beacon_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Beacon_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Beacon_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Beacon_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_relative_rate(self)


    def start(self):
        """start(Beacon_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_start(self)


    def stop(self):
        """stop(Beacon_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Beacon_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Beacon_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Beacon_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Beacon_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Beacon_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Beacon_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Beacon_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Beacon_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Beacon_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Beacon_sptr self, long max_output_buffer)
        set_max_output_buffer(Beacon_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Beacon_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Beacon_sptr self, long min_output_buffer)
        set_min_output_buffer(Beacon_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Beacon_sptr self, int which) -> float
        pc_input_buffers_full(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Beacon_sptr self, int which) -> float
        pc_input_buffers_full_avg(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Beacon_sptr self, int which) -> float
        pc_input_buffers_full_var(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Beacon_sptr self, int which) -> float
        pc_output_buffers_full(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Beacon_sptr self, int which) -> float
        pc_output_buffers_full_avg(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Beacon_sptr self, int which) -> float
        pc_output_buffers_full_var(Beacon_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Beacon_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Beacon_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Beacon_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Beacon_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Beacon_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Beacon_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Beacon_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Beacon_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Beacon_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Beacon_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Beacon_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Beacon_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Beacon_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Beacon_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Beacon_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Beacon_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Beacon_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Beacon_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Beacon_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Beacon_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_message_subscribers(self, which_port)

Beacon_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.Beacon_sptr_swigregister
Beacon_sptr_swigregister(Beacon_sptr)


Beacon_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Beacon = Beacon.make;

class MAC_Coordinator(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Coordinator.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Coordinator's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Coordinator::make is the public interface for creating new instances.

    Args:
        superframe_len : 
        total_slots : 
        threshold : 
        fcf : 
        seq_nr : 
        dst_pan : 
        coord_pan : 
        coord_addr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr):
        """
        make(long superframe_len, int total_slots, long threshold, int fcf, int seq_nr, int dst_pan, int coord_pan, int coord_addr) -> MAC_Coordinator_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Coordinator.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Coordinator's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Coordinator::make is the public interface for creating new instances.

        Args:
            superframe_len : 
            total_slots : 
            threshold : 
            fcf : 
            seq_nr : 
            dst_pan : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_make(superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Coordinator
    __del__ = lambda self: None
MAC_Coordinator_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_swigregister
MAC_Coordinator_swigregister(MAC_Coordinator)

def MAC_Coordinator_make(superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr):
    """
    MAC_Coordinator_make(long superframe_len, int total_slots, long threshold, int fcf, int seq_nr, int dst_pan, int coord_pan, int coord_addr) -> MAC_Coordinator_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Coordinator.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Coordinator's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Coordinator::make is the public interface for creating new instances.

    Args:
        superframe_len : 
        total_slots : 
        threshold : 
        fcf : 
        seq_nr : 
        dst_pan : 
        coord_pan : 
        coord_addr : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_make(superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr)

class MAC_Coordinator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Coordinator)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Coordinator)> self) -> MAC_Coordinator_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Coordinator)> self, MAC_Coordinator p) -> MAC_Coordinator_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_MAC_Coordinator_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MAC_Coordinator_sptr self) -> MAC_Coordinator"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Coordinator_sptr
    __del__ = lambda self: None

    def make(self, superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr):
        """
        make(MAC_Coordinator_sptr self, long superframe_len, int total_slots, long threshold, int fcf, int seq_nr, int dst_pan, int coord_pan, int coord_addr) -> MAC_Coordinator_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Coordinator.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Coordinator's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Coordinator::make is the public interface for creating new instances.

        Args:
            superframe_len : 
            total_slots : 
            threshold : 
            fcf : 
            seq_nr : 
            dst_pan : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_make(self, superframe_len, total_slots, threshold, fcf, seq_nr, dst_pan, coord_pan, coord_addr)


    def history(self):
        """history(MAC_Coordinator_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MAC_Coordinator_sptr self, int which, int delay)
        declare_sample_delay(MAC_Coordinator_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MAC_Coordinator_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MAC_Coordinator_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MAC_Coordinator_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_relative_rate(self)


    def start(self):
        """start(MAC_Coordinator_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_start(self)


    def stop(self):
        """stop(MAC_Coordinator_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MAC_Coordinator_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MAC_Coordinator_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MAC_Coordinator_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MAC_Coordinator_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MAC_Coordinator_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MAC_Coordinator_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MAC_Coordinator_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MAC_Coordinator_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MAC_Coordinator_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MAC_Coordinator_sptr self, long max_output_buffer)
        set_max_output_buffer(MAC_Coordinator_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MAC_Coordinator_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MAC_Coordinator_sptr self, long min_output_buffer)
        set_min_output_buffer(MAC_Coordinator_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MAC_Coordinator_sptr self, int which) -> float
        pc_input_buffers_full(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MAC_Coordinator_sptr self, int which) -> float
        pc_input_buffers_full_avg(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MAC_Coordinator_sptr self, int which) -> float
        pc_input_buffers_full_var(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MAC_Coordinator_sptr self, int which) -> float
        pc_output_buffers_full(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MAC_Coordinator_sptr self, int which) -> float
        pc_output_buffers_full_avg(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MAC_Coordinator_sptr self, int which) -> float
        pc_output_buffers_full_var(MAC_Coordinator_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MAC_Coordinator_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MAC_Coordinator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MAC_Coordinator_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MAC_Coordinator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MAC_Coordinator_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MAC_Coordinator_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MAC_Coordinator_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MAC_Coordinator_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MAC_Coordinator_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MAC_Coordinator_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MAC_Coordinator_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MAC_Coordinator_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MAC_Coordinator_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MAC_Coordinator_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MAC_Coordinator_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MAC_Coordinator_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MAC_Coordinator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MAC_Coordinator_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MAC_Coordinator_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MAC_Coordinator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_message_subscribers(self, which_port)

MAC_Coordinator_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Coordinator_sptr_swigregister
MAC_Coordinator_sptr_swigregister(MAC_Coordinator_sptr)


MAC_Coordinator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MAC_Coordinator = MAC_Coordinator.make;

class MAC_Sender(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Sender.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Sender's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Sender::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
        coord_pan : 
        coord_addr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
        """
        make(int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Sender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Sender.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Sender's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Sender::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Sender
    __del__ = lambda self: None
MAC_Sender_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_swigregister
MAC_Sender_swigregister(MAC_Sender)

def MAC_Sender_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
    """
    MAC_Sender_make(int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Sender_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Sender.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Sender's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Sender::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
        coord_pan : 
        coord_addr : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)

class MAC_Sender_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Sender)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Sender)> self) -> MAC_Sender_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Sender)> self, MAC_Sender p) -> MAC_Sender_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_MAC_Sender_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MAC_Sender_sptr self) -> MAC_Sender"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Sender_sptr
    __del__ = lambda self: None

    def make(self, fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
        """
        make(MAC_Sender_sptr self, int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Sender_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Sender.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Sender's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Sender::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_make(self, fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)


    def history(self):
        """history(MAC_Sender_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MAC_Sender_sptr self, int which, int delay)
        declare_sample_delay(MAC_Sender_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MAC_Sender_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MAC_Sender_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MAC_Sender_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_relative_rate(self)


    def start(self):
        """start(MAC_Sender_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_start(self)


    def stop(self):
        """stop(MAC_Sender_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MAC_Sender_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MAC_Sender_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MAC_Sender_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MAC_Sender_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MAC_Sender_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MAC_Sender_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MAC_Sender_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MAC_Sender_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MAC_Sender_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MAC_Sender_sptr self, long max_output_buffer)
        set_max_output_buffer(MAC_Sender_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MAC_Sender_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MAC_Sender_sptr self, long min_output_buffer)
        set_min_output_buffer(MAC_Sender_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MAC_Sender_sptr self, int which) -> float
        pc_input_buffers_full(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MAC_Sender_sptr self, int which) -> float
        pc_input_buffers_full_avg(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MAC_Sender_sptr self, int which) -> float
        pc_input_buffers_full_var(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MAC_Sender_sptr self, int which) -> float
        pc_output_buffers_full(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MAC_Sender_sptr self, int which) -> float
        pc_output_buffers_full_avg(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MAC_Sender_sptr self, int which) -> float
        pc_output_buffers_full_var(MAC_Sender_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MAC_Sender_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MAC_Sender_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MAC_Sender_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MAC_Sender_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MAC_Sender_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MAC_Sender_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MAC_Sender_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MAC_Sender_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MAC_Sender_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MAC_Sender_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MAC_Sender_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MAC_Sender_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MAC_Sender_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MAC_Sender_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MAC_Sender_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MAC_Sender_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MAC_Sender_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MAC_Sender_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MAC_Sender_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MAC_Sender_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_message_subscribers(self, which_port)

MAC_Sender_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Sender_sptr_swigregister
MAC_Sender_sptr_swigregister(MAC_Sender_sptr)


MAC_Sender_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MAC_Sender = MAC_Sender.make;

class AES(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::AES.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::AES's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::AES::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> AES_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::AES.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::AES's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::AES::make is the public interface for creating new instances.
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_make()

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_AES
    __del__ = lambda self: None
AES_swigregister = _IEEE_802_15_4_CustomBlocks_swig.AES_swigregister
AES_swigregister(AES)

def AES_make():
    """
    AES_make() -> AES_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::AES.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::AES's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::AES::make is the public interface for creating new instances.
    """
    return _IEEE_802_15_4_CustomBlocks_swig.AES_make()

class AES_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::AES)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::AES)> self) -> AES_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::AES)> self, AES p) -> AES_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_AES_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(AES_sptr self) -> AES"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_AES_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(AES_sptr self) -> AES_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::AES.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::AES's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::AES::make is the public interface for creating new instances.
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_make(self)


    def history(self):
        """history(AES_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(AES_sptr self, int which, int delay)
        declare_sample_delay(AES_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(AES_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(AES_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(AES_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_relative_rate(self)


    def start(self):
        """start(AES_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_start(self)


    def stop(self):
        """stop(AES_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(AES_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(AES_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(AES_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(AES_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(AES_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(AES_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(AES_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(AES_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(AES_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(AES_sptr self, long max_output_buffer)
        set_max_output_buffer(AES_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(AES_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(AES_sptr self, long min_output_buffer)
        set_min_output_buffer(AES_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(AES_sptr self, int which) -> float
        pc_input_buffers_full(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(AES_sptr self, int which) -> float
        pc_input_buffers_full_avg(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(AES_sptr self, int which) -> float
        pc_input_buffers_full_var(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(AES_sptr self, int which) -> float
        pc_output_buffers_full(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(AES_sptr self, int which) -> float
        pc_output_buffers_full_avg(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(AES_sptr self, int which) -> float
        pc_output_buffers_full_var(AES_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(AES_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(AES_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(AES_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(AES_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(AES_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(AES_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(AES_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(AES_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_name(self)


    def symbol_name(self):
        """symbol_name(AES_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(AES_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(AES_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(AES_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(AES_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(AES_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(AES_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(AES_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(AES_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(AES_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(AES_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(AES_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_message_subscribers(self, which_port)

AES_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.AES_sptr_swigregister
AES_sptr_swigregister(AES_sptr)


AES_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
AES = AES.make;

class MAC_Receiver(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Receiver.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Receiver's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Receiver::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
        coord_pan : 
        coord_addr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
        """
        make(int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Receiver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Receiver.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Receiver's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Receiver::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)

    make = staticmethod(make)
    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Receiver
    __del__ = lambda self: None
MAC_Receiver_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_swigregister
MAC_Receiver_swigregister(MAC_Receiver)

def MAC_Receiver_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
    """
    MAC_Receiver_make(int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Receiver_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Receiver.

    To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Receiver's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Receiver::make is the public interface for creating new instances.

    Args:
        fcf : 
        seq_nr : 
        dst_pan : 
        dst_addr : 
        src_pan : 
        src_addr : 
        coord_pan : 
        coord_addr : 
    """
    return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_make(fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)

class MAC_Receiver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Receiver)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Receiver)> self) -> MAC_Receiver_sptr
        __init__(boost::shared_ptr<(gr::IEEE_802_15_4_CustomBlocks::MAC_Receiver)> self, MAC_Receiver p) -> MAC_Receiver_sptr
        """
        this = _IEEE_802_15_4_CustomBlocks_swig.new_MAC_Receiver_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(MAC_Receiver_sptr self) -> MAC_Receiver"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr___deref__(self)

    __swig_destroy__ = _IEEE_802_15_4_CustomBlocks_swig.delete_MAC_Receiver_sptr
    __del__ = lambda self: None

    def make(self, fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr):
        """
        make(MAC_Receiver_sptr self, int fcf, int seq_nr, int dst_pan, int dst_addr, int src_pan, int src_addr, int coord_pan, int coord_addr) -> MAC_Receiver_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of IEEE_802_15_4_CustomBlocks::MAC_Receiver.

        To avoid accidental use of raw pointers, IEEE_802_15_4_CustomBlocks::MAC_Receiver's constructor is in a private implementation class. IEEE_802_15_4_CustomBlocks::MAC_Receiver::make is the public interface for creating new instances.

        Args:
            fcf : 
            seq_nr : 
            dst_pan : 
            dst_addr : 
            src_pan : 
            src_addr : 
            coord_pan : 
            coord_addr : 
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_make(self, fcf, seq_nr, dst_pan, dst_addr, src_pan, src_addr, coord_pan, coord_addr)


    def history(self):
        """history(MAC_Receiver_sptr self) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(MAC_Receiver_sptr self, int which, int delay)
        declare_sample_delay(MAC_Receiver_sptr self, unsigned int delay)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(MAC_Receiver_sptr self, int which) -> unsigned int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(MAC_Receiver_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(MAC_Receiver_sptr self) -> double"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_relative_rate(self)


    def start(self):
        """start(MAC_Receiver_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_start(self)


    def stop(self):
        """stop(MAC_Receiver_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(MAC_Receiver_sptr self, unsigned int which_input) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(MAC_Receiver_sptr self, unsigned int which_output) -> uint64_t"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(MAC_Receiver_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(MAC_Receiver_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(MAC_Receiver_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(MAC_Receiver_sptr self) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(MAC_Receiver_sptr self, int m)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(MAC_Receiver_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(MAC_Receiver_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(MAC_Receiver_sptr self, long max_output_buffer)
        set_max_output_buffer(MAC_Receiver_sptr self, int port, long max_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(MAC_Receiver_sptr self, int i) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(MAC_Receiver_sptr self, long min_output_buffer)
        set_min_output_buffer(MAC_Receiver_sptr self, int port, long min_output_buffer)
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(MAC_Receiver_sptr self, int which) -> float
        pc_input_buffers_full(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(MAC_Receiver_sptr self, int which) -> float
        pc_input_buffers_full_avg(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(MAC_Receiver_sptr self, int which) -> float
        pc_input_buffers_full_var(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(MAC_Receiver_sptr self, int which) -> float
        pc_output_buffers_full(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(MAC_Receiver_sptr self, int which) -> float
        pc_output_buffers_full_avg(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(MAC_Receiver_sptr self, int which) -> float
        pc_output_buffers_full_var(MAC_Receiver_sptr self) -> pmt_vector_float
        """
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(MAC_Receiver_sptr self) -> float"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(MAC_Receiver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(MAC_Receiver_sptr self)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(MAC_Receiver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(MAC_Receiver_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(MAC_Receiver_sptr self) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(MAC_Receiver_sptr self, int priority) -> int"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(MAC_Receiver_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_name(self)


    def symbol_name(self):
        """symbol_name(MAC_Receiver_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(MAC_Receiver_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(MAC_Receiver_sptr self) -> io_signature_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(MAC_Receiver_sptr self) -> long"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(MAC_Receiver_sptr self) -> basic_block_sptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(MAC_Receiver_sptr self, int ninputs, int noutputs) -> bool"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(MAC_Receiver_sptr self) -> std::string"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(MAC_Receiver_sptr self, std::string name)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(MAC_Receiver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(MAC_Receiver_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(MAC_Receiver_sptr self) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(MAC_Receiver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_message_subscribers(self, which_port)

MAC_Receiver_sptr_swigregister = _IEEE_802_15_4_CustomBlocks_swig.MAC_Receiver_sptr_swigregister
MAC_Receiver_sptr_swigregister(MAC_Receiver_sptr)


MAC_Receiver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
MAC_Receiver = MAC_Receiver.make;



